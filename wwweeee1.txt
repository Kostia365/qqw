#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Структура для хранения данных о точке
typedef struct {
    char name[50];
    double x;
    double y;
} Point;

// Функция для вычисления расстояния между двумя точками
double calculate_distance(Point p1, Point p2) {
    return sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));
}

int main() {
    int num_points;

    // Запрос у пользователя количества точек
    printf("Введите количество точек на маршруте: ");
    scanf("%d", &num_points);

    // Проверка корректности введенного количества точек
    if (num_points < 2) {
        printf("Количество точек должно быть не менее двух.\n");
        return 1;
    }

    // Выделение памяти для точек
    Point *points = (Point *)malloc(num_points * sizeof(Point));

    // Сбор данных о точках
    for (int i = 0; i < num_points; i++) {
        printf("Введите название точки %d: ", i + 1);
        scanf("%s", points[i].name);
        printf("Введите координаты (x y) точки %d: ", i + 1);
        scanf("%lf %lf", &points[i].x, &points[i].y);
    }

    // Вычисление расстояний
    double *distances = (double *)malloc((num_points - 1) * sizeof(double));
    double total_distance = 0.0;
    for (int i = 1; i < num_points; i++) {
        distances[i - 1] = calculate_distance(points[i - 1], points[i]);
        total_distance += distances[i - 1];
    }

    // Вывод результатов
    printf("\nLp.   Название точки   Координаты        Расстояние    Маршрут\n");
    printf("------------------------------------------------------------\n");

    int distance_from_start = 0;
    printf("%-5d %-16s (%.0f, %.0f) %-13s %d\n", 1, points[0].name, points[0].x, points[0].y, "-", distance_from_start);

    for (int i = 1; i < num_points; i++) {
        int rounded_distance = (int)round(distances[i - 1]);
        distance_from_start += rounded_distance;
        printf("%-5d %-16s (%.0f, %.0f) %-13d %d\n", i + 1, points[i].name, points[i].x, points[i].y, rounded_distance, distance_from_start);
    }

    // Освобождение памяти
    free(points);
    free(distances);

    return 0;
}
